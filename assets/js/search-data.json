{
  
    
        "post0": {
            "title": "Code.org",
            "content": "![test](images/CLCEqc0.png) .",
            "url": "https://vunsh.github.io/blogging/csa/jupyter/code.org/2022/09/06/CodeOrg.html",
            "relUrl": "/csa/jupyter/code.org/2022/09/06/CodeOrg.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Java Game Menu",
            "content": "import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class test { public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); break; case 1: rps(); quit = true; break; case 2: horl(); quit = true; break; case 3: ticTacToe(); quit = true; break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); break; } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } public test() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.menuString(); // print Menu boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } public void menuString(){ String menuText = &quot;&quot;&quot; u001B[35m___________________________ |~~~~~~~~~~~~~~~~~~~~~~~~~| | u001B[0m Menu! u001B[35m| |~~~~~~~~~~~~~~~~~~~~~~~~~| | 1 - Rock Paper Scissors | | 2 - Higher or Lower | | 3 - Tic Tac Toe | |_________________________| u001B[0m Choose an option. &quot;&quot;&quot;; System.out.println(menuText); } public void horl(){ System.out.println(&quot;Higher or Lower&quot;); System.out.println(&quot;You have three guesses to guess the number I am thinking of between 1-8.&quot;); System.out.println(&quot;If you guess the number correctly, you win!&quot;); Scanner scHL = new Scanner(System.in); int randomG = (int) (Math.random() * 10) + 1; int guess = scHL.nextInt(); for(int i = 3; i &gt; 0; i--){ if(guess == randomG){ System.out.println(&quot;You win!&quot;); break; } else if(guess &gt; randomG){ System.out.println(&quot;The number is lower&quot;); } else if(guess &lt; randomG){ System.out.println(&quot;The number is higher&quot;); } guess = scHL.nextInt(); } System.out.println(&quot;Game over.&quot;); cont(); scHL.close(); } public void rps(){ System.out.println(&quot;Rock Paper Scissors&quot;); System.out.println(&quot;Type r for rock, p for paper, or s for scissors&quot;); Scanner scRPS = new Scanner(System.in); String userChoice = scRPS.nextLine().toLowerCase(); Boolean quit = false; int random = (int) (Math.random() * 3); while(quit == false){ if(userChoice.equals(&quot;r&quot;)){ if(random == 1){ System.out.println(&quot;You chose rock nThe computer chose paper nYou lose!&quot;); quit = true; } else if(random == 2){ System.out.println(&quot;You chose rock nThe computer chose scissors nYou win!&quot;); quit = true; } else{ System.out.println(&quot;You chose rock nThe computer chose rock nIt&#39;s a tie!&quot;); quit = true; } } else if(userChoice.equals(&quot;p&quot;)){ if(random == 1){ System.out.println(&quot;You chose paper nThe computer chose paper nIt&#39;s a tie!&quot;); quit = true; } else if(random == 2){ System.out.println(&quot;You chose paper nThe computer chose scissors nYou lose!&quot;); quit = true; } else{ System.out.println(&quot;You chose paper nThe computer chose rock nYou win!&quot;); quit = true; } } else if(userChoice.equals(&quot;s&quot;)){ if(random == 1){ System.out.println(&quot;You chose scissors nThe computer chose paper nYou win!&quot;); quit = true; } else if(random == 2){ System.out.println(&quot;You chose scissors nThe computer chose scissors nIt&#39;s a tie!&quot;); quit = true; } else{ System.out.println(&quot;You chose scissors nThe computer chose rock nYou lose!&quot;); quit = true; } } else{ System.out.println(&quot;Invalid input, try again&quot;); userChoice = scRPS.nextLine(); } } cont(); scRPS.close(); } public void ticTacToe(){ System.out.println(&quot;Tic Tac Toe&quot;); Scanner scTTT = new Scanner(System.in); String[] board = {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;}; String player = &quot;X&quot;; String player2 = &quot;O&quot;; int turn = 0; Boolean quit = false; System.out.println(&quot;Do you want to play against a friend or the computer?&quot;); System.out.println(&quot;Type 1 for friend, 2 for computer&quot;); int choice = scTTT.nextInt(); //make tic tac toe using player1 and player2 if(choice == 1){ System.out.println(&quot;Type the number of the square you want to place your piece in&quot;); while(quit == false){ System.out.println(&quot;Player 1&#39;s turn (X)&quot;); System.out.println(board[0] + &quot; | &quot; + board[1] + &quot; | &quot; + board[2]); System.out.println(board[3] + &quot; | &quot; + board[4] + &quot; | &quot; + board[5]); System.out.println(board[6] + &quot; | &quot; + board[7] + &quot; | &quot; + board[8]); int move = scTTT.nextInt(); if(board[move - 1].equals(&quot;X&quot;) || board[move - 1].equals(&quot;O&quot;)){ System.out.println(&quot;That square is already taken, try again&quot;); } else{ board[move - 1] = player; turn++; if(board[0].equals(&quot;X&quot;) &amp;&amp; board[1].equals(&quot;X&quot;) &amp;&amp; board[2].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[3].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[5].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[6].equals(&quot;X&quot;) &amp;&amp; board[7].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[0].equals(&quot;X&quot;) &amp;&amp; board[3].equals(&quot;X&quot;) &amp;&amp; board[6].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[1].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[7].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[2].equals(&quot;X&quot;) &amp;&amp; board[5].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[0].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[2].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[6].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(turn == 9){ System.out.println(&quot;It&#39;s a tie!&quot;); quit = true; } else{ System.out.println(&quot;Player 2&#39;s turn (O)&quot;); System.out.println(board[0] + &quot; | &quot; + board[1] + &quot; | &quot; + board[2]); System.out.println(board[3] + &quot; | &quot; + board[4] + &quot; | &quot; + board[5]); System.out.println(board[6] + &quot; | &quot; + board[7] + &quot; | &quot; + board[8]); int move2 = scTTT.nextInt(); if(board[move2 - 1].equals(&quot;X&quot;) || board[move2 - 1].equals(&quot;O&quot;)){ System.out.println(&quot;That square is already taken, try again&quot;); } else{ board[move2 - 1] = player2; turn++; if(board[0].equals(&quot;O&quot;) &amp;&amp; board[1].equals(&quot;O&quot;) &amp;&amp; board[2].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } else if(board[3].equals(&quot;O&quot;) &amp;&amp; board[4].equals(&quot;O&quot;) &amp;&amp; board[5].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } else if(board[6].equals(&quot;O&quot;) &amp;&amp; board[7].equals(&quot;O&quot;) &amp;&amp; board[8].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } else if(board[0].equals(&quot;O&quot;) &amp;&amp; board[3].equals(&quot;O&quot;) &amp;&amp; board[6].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } else if(board[1].equals(&quot;O&quot;) &amp;&amp; board[4].equals(&quot;O&quot;) &amp;&amp; board[7].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } else if(board[2].equals(&quot;O&quot;) &amp;&amp; board[5].equals(&quot;O&quot;) &amp;&amp; board[8].equals(&quot;O&quot;)){ System.out.println(&quot;Player 2 wins!&quot;); quit = true; } } } } } } if(choice == 2){ String computer = &quot;O&quot;; System.out.println(&quot;Type the number of the square you want to place your piece in&quot;); while(quit == false){ System.out.println(&quot;Player 1&#39;s turn (X)&quot;); System.out.println(board[0] + &quot; | &quot; + board[1] + &quot; | &quot; + board[2]); System.out.println(board[3] + &quot; | &quot; + board[4] + &quot; | &quot; + board[5]); System.out.println(board[6] + &quot; | &quot; + board[7] + &quot; | &quot; + board[8]); int move = scTTT.nextInt(); if(board[move - 1].equals(&quot;X&quot;) || board[move - 1].equals(&quot;O&quot;)){ System.out.println(&quot;That square is already taken, try again&quot;); } else{ board[move - 1] = player; turn++; if(board[0].equals(&quot;X&quot;) &amp;&amp; board[1].equals(&quot;X&quot;) &amp;&amp; board[2].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[3].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[5].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[6].equals(&quot;X&quot;) &amp;&amp; board[7].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[0].equals(&quot;X&quot;) &amp;&amp; board[3].equals(&quot;X&quot;) &amp;&amp; board[6].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[1].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[7].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[2].equals(&quot;X&quot;) &amp;&amp; board[5].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[0].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[8].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(board[2].equals(&quot;X&quot;) &amp;&amp; board[4].equals(&quot;X&quot;) &amp;&amp; board[6].equals(&quot;X&quot;)){ System.out.println(&quot;Player 1 wins!&quot;); quit = true; } else if(turn == 9){ System.out.println(&quot;It&#39;s a tie!&quot;); quit = true; } else{ System.out.println(&quot;Computer&#39;s turn (O)&quot;); System.out.println(board[0] + &quot; | &quot; + board[1] + &quot; | &quot; + board[2]); System.out.println(board[3] + &quot; | &quot; + board[4] + &quot; | &quot; + board[5]); System.out.println(board[6] + &quot; | &quot; + board[7] + &quot; | &quot; + board[8]); int move2 = (int)(Math.random() * 9) + 1; if(board[move2 - 1].equals(&quot;X&quot;) || board[move2 - 1].equals(&quot;O&quot;)){ System.out.println(&quot;That square is already taken, try again&quot;); } else{ board[move2 - 1] = computer; turn++; if(board[0].equals(&quot;O&quot;) &amp;&amp; board[1].equals(&quot;O&quot;) &amp;&amp; board[2].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } else if(board[3].equals(&quot;O&quot;) &amp;&amp; board[4].equals(&quot;O&quot;) &amp;&amp; board[5].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } else if(board[6].equals(&quot;O&quot;) &amp;&amp; board[7].equals(&quot;O&quot;) &amp;&amp; board[8].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } else if(board[0].equals(&quot;O&quot;) &amp;&amp; board[3].equals(&quot;O&quot;) &amp;&amp; board[6].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } else if(board[1].equals(&quot;O&quot;) &amp;&amp; board[4].equals(&quot;O&quot;) &amp;&amp; board[7].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } else if(board[2].equals(&quot;O&quot;) &amp;&amp; board[5].equals(&quot;O&quot;) &amp;&amp; board[8].equals(&quot;O&quot;)){ System.out.println(&quot;Computer wins!&quot;); quit = true; } } } } } } cont(); scTTT.close(); } public void cont(){ Scanner scContinue = new Scanner(System.in); System.out.println(&quot;Would you like to continue? (y/n)&quot;); String userContinue = scContinue.nextLine().toLowerCase(); if(userContinue.equals(&quot;y&quot;)){ new test(); test.main(null); } else if(userContinue.equals(&quot;n&quot;)){ System.out.println(&quot;Goodbye!&quot;); System.exit(0); } else{ System.out.println(&quot;Invalid input, try again&quot;); userContinue = scContinue.nextLine(); } scContinue.close(); } static public void main(String[] args) { new test(); // starting Menu object test.main(null); } } .",
            "url": "https://vunsh.github.io/blogging/fastpages/jupyter/java/pbl/2022/09/05/Java-Menu.html",
            "relUrl": "/fastpages/jupyter/java/pbl/2022/09/05/Java-Menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Darkmode for GitHub Fastpages",
            "content": "Hey bloggers! . If you are on this page, chances are you are interested in implementing dark mode into your website. What you see now is an example of Dark Mode being used on a Github fastpages build. It is a very simple addition that can help personalize your site. . Original Blog Post . Guide . Navigate to the style directory in your code editor. This is by default stored in _sass/minima. Example minima folder | Create a file in this directory for your dark mode styling. Name it whatever you want, but for this guide I named it dark-mode.scss. Make sure you use the scss file suffix! Example dark mode file | If you would like to use the default dark mode template, copy the code from this file and paste it into your dark mode file. | Navigate to the custom styles file in your text editor folder. By default, it is named custom-styles.scss Example Custom Styles File | Under the comment, import your dark mode file. Example import statement | . /*--*/ /*-- ADD YOUR STYLES BELOW -*/ @import &quot;minima/dark-mode&quot;; . Links . Credit to this blog post here for the information. . Example repository that has dark mode implemented . Further your Knowledge . Dark mode is cool and all, but why not take it a step further? See if you can figure out how to toggle the import statement on and off to make a toggleable theme set. Try editing the dark mode file to mess around with the shades/colors of your dark mode settings to make it as personalized as you can. Be creative and innovative! .",
            "url": "https://vunsh.github.io/blogging/fastpages/jupyter/darkmode/2022/08/30/22-Darkmode.html",
            "relUrl": "/fastpages/jupyter/darkmode/2022/08/30/22-Darkmode.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash Checks",
            "content": "echo &quot;use jupyter kernelspec to view all runnable kernals&quot; (base) id:~$ jupyter kernelspec list # list kernels . Available kernels: bash /home/vunsh/.local/share/jupyter/kernels/bash java /home/vunsh/.local/share/jupyter/kernels/java javascript /home/vunsh/.local/share/jupyter/kernels/javascript python3 /home/vunsh/.local/share/jupyter/kernels/python3 . For proof of other installations, view fastpages website. .",
            "url": "https://vunsh.github.io/blogging/bash/jupyter/2022/08/29/Bash-Checks.html",
            "relUrl": "/bash/jupyter/2022/08/29/Bash-Checks.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Calendar with Jupyter",
            "content": "August Sunday Monday Tuesday Wednesday Thursday Friday Saturday . | | 1 | 2 | 3 | 4 | 5 | 6 | . | 7 | 8 | 9 | 10 | 11 | 12 | 13 | . | 14 | 15 | 16 | 17 | 18 | 19 | 20 | . | 21 Submit Tools and Equipment for CSA. | Get bag ready for school tommorow | . | 22 Work on CSA FastPages. | Start Civics Political Spectrum Presentation. | . | 23 Work on CSA FastPages. | Continue Civics Political Spectrum Presentation. | . | 24 Work on CSA FastPages. | Prepare for filming of My Life Project. | . | 25 Work on CSA FastPages | Complete Filming for My Life Project | . | 26 | 27 | . 28 | 29 | 30 | 31 | .",
            "url": "https://vunsh.github.io/blogging/calendar/2022/08/25/Calendar.html",
            "relUrl": "/calendar/2022/08/25/Calendar.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "First Blog Post",
            "content": "Welcome to my blog! . Basic setup . This is my first blog post . Welcome! . Footnotes .",
            "url": "https://vunsh.github.io/blogging/markdown/2022/08/18/first-post.html",
            "relUrl": "/markdown/2022/08/18/first-post.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "CSA Journals",
            "content": "Anatomy of Java ~ 8/19/22 . Front Matter . Front Matter - works with Jupyter notebooks to deploy bogs into fastpages | Journals/Code examples possible, migrate from using Google Docs etc to Markdown and Jupyter | . Java Info . Multiple functions/classes can have the same name with different signatures (parameters, etc) | Java is an Object Oriented Programming language | . Primitive Data ~ 8/23/22 . Primitve Data Types . Things like booleans and numeric data types are considered primitive. | . Non Primitive Data Types . Everything else (String, Array, etc.) | . public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; double aDouble = 89.9; boolean aBoolean = true; // not primitives but essential String aString = &quot;Hello, World!&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) .",
            "url": "https://vunsh.github.io/blogging/journal/2020/08/22/CSA-Notebooks.html",
            "relUrl": "/journal/2020/08/22/CSA-Notebooks.html",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "CSA Test Journal",
            "content": "print(&#39;Hello World&#39;) . System.out.println(“Hello World”) .",
            "url": "https://vunsh.github.io/blogging/fastpages/jupyter/2020/08/21/CSA-Testing.html",
            "relUrl": "/fastpages/jupyter/2020/08/21/CSA-Testing.html",
            "date": " • Aug 21, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vunsh.github.io/blogging/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vunsh.github.io/blogging/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vunsh.github.io/blogging/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Calendar",
          "content": "&lt;!DOCTYPE html&gt; . . vunsh | calendar Return to FastPages August . &lt;table class = &quot;table&quot; border-collapse: &quot;collapse&quot; bgcolor=&quot;lightgrey&quot; align=&quot;center&quot; cellspacing=&quot;40&quot; cellpadding=&quot;40&quot;&gt; Sun Mon Tue Wed Thu Fri Sat . | 1 | 2 | 3 | 4 | 5 | 6 | . . 7 | 8 | 9 | 10 | 11 | 12 | 13 | . 14 | 15 | 16 | 17 | 18 | 19 | 20 | . 21 | 22 | 23 | 24 | 25 | 26 | 27 | . 28 | 29 | 30 | 31 | 1 | 2 | 3 | . &lt;/table&gt; August 24th . Work on CSA Weekly Tasks | Work on My Life Storyboards for DMP | August 25th . Submit History Presentation | Start filming My Life project | August 26th . Create online planner (completed) | Get my offroll sticker for my student ID | Start editing My Life Project | Get Ready for coding today at 4:30 - 5:30 | August 29th . Finish AP CSA Weekly Ticket and submit by the end of the day | Finish incomplete history presentation and submit it | August 30th . History Makeups | DMP Finish My Life | August 31st . Watch history video and take notes | DECA Interview at 4:30 today | Finish My Life project for DMP and submit on time!!! | .",
          "url": "https://vunsh.github.io/blogging/calendar/",
          "relUrl": "/calendar/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vunsh.github.io/blogging/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}